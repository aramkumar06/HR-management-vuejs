<template xmlns:v-on="http://www.w3.org/1999/xhtml">
  <v-layout>
    <div class="row">
      <div class="col-md-12">
        <router-link
          :to="{ name: 'earning.create' }"
          class="btn btn-success pull-right offset-md-10 col-md-2"
        >
          Add New Earning
        </router-link>
      </div>
    </div>

    <br />

    <v-card contextual-style="dark">
      <span slot="header">
        My Earnings
      </span>

      <div slot="body">
        <div class="row">
          <div class="col-3">
            <select
              class="form-control"
              v-if="years && years.length > 0"
              v-model="filterObject.year"
              v-on:change="populateMonths()"
            >
              <option
                v-for="year in years"
                :value="year.value"
              >
                {{ year.caption }}
              </option>
            </select>
          </div>
          <div class="col-3">
            <select
              class="form-control"
              v-if="months && months.length > 0"
              v-model="filterObject.month"
              v-on:change="populateWeeks()"
            >
              <option
                v-for="month in months"
                :value="month.value"
              >
                {{ month.caption }}
              </option>
            </select>
          </div>
          <div class="col-3">
            <select
              class="form-control"
              v-if="weeks && weeks.length >0"
              v-model="filterObject.week"
            >
              <option
                v-for="(week, w_index) in weeks"
                :value="week.value"
              >
                Week {{ w_index + 1 }}
              </option>
            </select>
          </div>
          <div class="col-3">
            <button
              class="btn btn-xs btn-primary pull-right"
              @click="queryEarnings()"
            >
              Filter
            </button>
          </div>
        </div>

        <br />

        <div class="row">
          <div class="col-12">
            <v-line-chart
              v-if="earningsLoaded"
              :chart-data="chartData"
              :options="options"
            ></v-line-chart>
          </div>
        </div>

        <br />

        <table class="table table-striped">
          <thead>
            <th>
              Site
            </th>
            <th>
              Account
            </th>
            <th>
              Week
            </th>
            <th>
              Cost
            </th>
            <th>
              Status
            </th>
          </thead>
          <tbody v-if="earnings.length > 0">
            <tr
              v-for="earning in earnings"
            >
              <td>
                {{ earning.site_name }}
              </td>
              <td>
                {{ earning.account_first_name + ' ' + earning.account_last_name }}
              </td>
              <td>
                {{ earning.year }}-{{ earning.week_of_year }}
              </td>
              <td>
                {{ dollarFormat(earning.cost) }}
              </td>
              <td>
                {{ earning.status }}
              </td>
            </tr>
          </tbody>
        </table>

        <br />

        <div class="row">
          <div class="col-9">
          </div>
          <div class="col-1">
            <strong>
              Total :
            </strong>
          </div>
          <div class="col-2">
            <strong v-if="summary != null">
              {{ dollarFormat(summary) }}
            </strong>
          </div>
        </div>
      </div>
    </v-card>

  </v-layout>
</template>

<script>
import VLayout from '@/layouts/Default.vue';
import VCard from '@/components/Card.vue';
import store from '@/store';
import EarningProxy from '@/proxies/EarningProxy.js';
import NumberUtil from '@/utils/NumberUtil.js';
import VLineChart from '@/components/LineChart.js';
import '@/utils/ColorUtil.js';

export default {
  /**
   * The name of the page.
   */
  name: 'EarningIndex',

  /**
   * The components that the page can use.
   */
  components: {
    VLayout,
    VCard,
    VLineChart,
  },
  data() {
    return {
      years: [],
      months: [],
      weeks: [],
      filterObject: {
        year: null,
        month: null,
        week: null,
      },
      earnings: [],
      summary: null,
      isLoading: false,
      chartData: null,
      options: null,
      earningsLoaded: false,
    }
  },
  computed: {
  },
  mounted() {
    if (typeof(this.$route.query['year']) === 'undefined' || this.$route.query['year'] === null) {
      this.filterObject.year = store.state.auth.app.active_year;
    } else {
      this.filterObject.year = this.$route.query['year']
    }

    if (typeof(this.$route.query['month']) === 'undefined' || this.$route.query['month'] === null) {
      this.filterObject.month = store.state.auth.app.active_month;
    } else {
      this.filterObject.month = this.$route.query['month'];
    }


    this.populateYears();
    this.populateMonths();

    this.queryEarnings();
  },
  methods: {
    dollarFormat(value) {
      return NumberUtil.currencyFormatter(value);
    },
    populateYears() {
      for (const key of Object.keys(store.state.auth.app.book_dates)) {
        this.years.push({ value: key, caption: key});
      }
    },
    populateMonths() {
      if (typeof(this.filterObject.year) === 'undefined' || this.filterObject.year === null || this.months.length > 0) {
        return;
      }

      for (const key of Object.keys(store.state.auth.app.book_dates[this.filterObject.year])) {
        this.months.push({ value: key, caption: key })
      }
    },
    queryEarnings() {
      this.isLoading = true;
      new EarningProxy(this.filterObject).index()
        .then((response) => {
          if (response.success === true) {
            this.earnings = response.earnings;
            this.summary = response.summary;
            this.earningsLoaded = true;
            this.fillChartData();
          } else {

          }
        })
        .catch((error) => {
          console.log('Request failed...');
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    fillChartData() {
      let labels = [];
      let data = [];
      let backgroundColors = [];
      let suggestedMax;
      let suggestedMin;
      let max = 0;
      let min = 0;
      let index = 0;
      const multiplier = 1.5;
      const week_of_month = 4;
      const top_threshold = 2500;
      const intermediate_threshold = 2000;
      const elementary__threshold = 1500;
      const last_threshold = 500;

      for (const earning of this.earnings) {
        labels.push(`Week ${index + 1}`);
        data.push(earning.cost);
        index = index + 1;
        if (earning.cost > max) {
          max = earning.cost;
        }

        if (earning.cost < min) {
          min = earning.cost;
        }

        if (earning.cost >= top_threshold) {
          backgroundColors.push(window.chartColors.green);
        } else if (earning.cost >= intermediate_threshold) {
          backgroundColors.push(window.chartColors.blue);
        } else if (earning.cost >= elementary__threshold) {
          backgroundColors.push(window.chartColors.orange);
        } else if (earning.cost >= last_threshold) {
          backgroundColors.push(window.chartColors.yellow);
        } else {
          backgroundColors.push(window.chartColors.red);
        }
      }

      const difference = week_of_month - index;
      if ( difference > 0 ) {
        for (let i=0; i<difference; i++) {
          labels.push(`Week ${index + 1}`);
          data.push(0);
          backgroundColors.push(window.chartColors.red);
          index = index + 1;
        }
      }

      suggestedMax = max * multiplier;
      suggestedMin = min * multiplier;

      this.chartData = {
        labels: labels,
        datasets: [
          {
            backgroundColor: backgroundColors,
            label: 'Week',
            data: data,
            lineTension: 0,
          },
        ],
      };

      this.options = {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          xAxes: [
            {
              barPercentage: 0.3,
            }
          ],
          yAxes: [
            {
              ticks:
                {
                  suggestedMin: suggestedMin,
                  suggestedMax: suggestedMax,
                },
            },
          ],
        }
      };
    },
  },
};
</script>
