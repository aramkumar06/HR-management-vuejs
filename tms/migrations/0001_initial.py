# Generated by Django 2.1.2 on 2019-07-24 14:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=20)),
                ('birthday', models.DateField()),
                ('address', models.CharField(max_length=50)),
                ('contact_number', models.CharField(max_length=50)),
                ('deleted_at', models.DateTimeField(help_text='deleted date', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=15)),
                ('last_name', models.CharField(max_length=15)),
                ('email', models.EmailField(help_text='Email', max_length=30)),
                ('email_password', models.CharField(help_text='Email password', max_length=40)),
                ('skype', models.CharField(help_text='Skype username. It could be null.', max_length=30, null=True)),
                ('skype_password', models.CharField(help_text='Skype password. It could be null.', max_length=30, null=True)),
                ('status', models.BooleanField(default=True, help_text='It represents whether account is active or not.')),
                ('phone_number', models.CharField(help_text='Phone number related to this account.It could be null', max_length=11, null=True)),
                ('created_date', models.DateField(help_text='The date when the account is created.')),
                ('suspended_date', models.DateField(help_text='The date when the account is suspended.', null=True)),
                ('registered_date', models.DateTimeField(auto_now_add=True)),
                ('recital', models.TextField(help_text='May include zipcode, address and other information.', max_length=1000, null=True)),
                ('title', models.CharField(help_text='Title', max_length=150)),
                ('overview', models.TextField(help_text='Overview', max_length=5000)),
                ('deleted_at', models.DateTimeField(help_text='deleted date', null=True)),
                ('is_payment_account', models.BooleanField(default=False, help_text='Indicates whether it is payment gateway account or not')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(help_text='booking year')),
                ('month', models.IntegerField(help_text='booking month')),
                ('status', models.CharField(choices=[('Calculated', 'Calculated'), ('Activate', 'Active')], help_text='active or calculated', max_length=20)),
                ('weeks', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='aggregation of week numbers for month', size=None)),
                ('booked_date', models.DateTimeField(help_text='date when accounting month is finished', null=True)),
                ('comments', models.TextField(help_text='comments', max_length=1024, null=True)),
                ('start_date', models.DateField(help_text='working month start date')),
                ('end_date', models.DateField(help_text='working month end date')),
                ('done_by', models.ForeignKey(help_text='user who calculated whole', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('code', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Earning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.FloatField()),
                ('week_of_year', models.IntegerField()),
                ('year', models.IntegerField()),
                ('status', models.CharField(choices=[('Review', 'Review'), ('Withdraw', 'Withdraw')], default='Review', max_length=20)),
                ('withdrawn_date', models.DateField(help_text='date time when withdraw', null=True)),
                ('comments', models.TextField(help_text='description', max_length=1024, null=True)),
                ('created_at', models.DateField(auto_now_add=True, help_text='created date')),
                ('deleted_at', models.DateTimeField(help_text='deleted date', null=True)),
                ('approved_date', models.DateField(help_text='date when approved', null=True)),
                ('account', models.ForeignKey(help_text='mapped to account', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tms.Account')),
                ('approved_by', models.ForeignKey(help_text='user who confirmed paying', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_by', to=settings.AUTH_USER_MODEL)),
                ('earned_by', models.ForeignKey(help_text='user who earns', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='earned_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('url', models.URLField(max_length=100)),
                ('description', models.TextField(max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tms.Country'),
        ),
        migrations.AddField(
            model_name='account',
            name='site',
            field=models.ForeignKey(help_text='Working site', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tms.Site'),
        ),
        migrations.AddField(
            model_name='account',
            name='user',
            field=models.ForeignKey(help_text='Owner of account', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tms.Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tms.Team'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
